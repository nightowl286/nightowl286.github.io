<project name="Husic">
	<summary>create the best offline music player, initially inspired simply because shuffle algorithms suck.</summary>
	<content>
			Music players are cool, there's a lot of different ways they can be made, they
			come with different <abbr title="Quality of life">QoL</abbr> features, some forget
			what the word <abbr title="Do not connect to the f**king internet">offline</abbr> means,
			some decide to stream music from god knows what questionable sources, and some are
			created by people who clearly have no artistic bone in their body <thought>(not their fault though)</thought>.
	</content>

	<article id="shuffle" title="Shuffle algorithms">
			<summary>
				<thought>(Where do I even begin with this)</thought>
			</summary>
			<content>
				Okay so shuffle algorithms suck when it comes to listening to music. There are a few
				common <thought>(and terrible)</thought> things that a lot of programs and websites do when it
				comes to shuffling, and they all suck in their own terrible ways.
			</content>
			<section id="random" title="Randomly picking the next song">
				Why would anyone ever actually want this, like whyyyyyyy..... Just how lazy did the developers get?!
				Do they even listen to music themselves?! Or talk to anyone that listens to music regularly?!
				Why in the name of all that is sane would <em>anyone</em> want this?!

				There are SOOOOO many problems with this approach <thought>(depending on just how lazy the <abbr title="developers">devs</abbr> are)</thought>,
				especially when you're listening to shorter playlists. Imagine you get really unlucky, or the underlying
				<link href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">
					<abbr title="Pseudorandom number generator">PRNG</abbr>
				</link>
				algorithm is a really awful one, and the universe just deems that you should be jumping back and forth
				between two or three songs.

				But has this actually happened to someone? God I hope not, but the fact that it <em>could</em> happen, is concerning.
				Especially when the probability isn't even that low.

				Imagine you have a playlist that only contains 5 songs, so when a song
				finishes plaything, there's a 25% probability for which song is chosen next
				<thought>(if your random pick allows for picking the same song that has just played then please be ashamed of yourself even more)</thought>,
				and so when that song finishes playing, there's a 25% probability
				that the song you just listened to beforehand is picked.

				What's worse is that getting a pattern like: A ➞ B ➞<sup>25%</sup> A ➞<sup>25%</sup> B is still a 6.25%
				probability, <thought>(since the first two picks don't matter, it only matters that the next two picks are the same as the first two)</thought>
				and with how much I listen to music this could be happening every day!!!

				Does anyone actually do this? Yes, YouTube is a prime offender
				<thought>(among all the other problems YouTube has, but more on that later)</thought>.
			</section>

			<section id="upcoming" title="Shuffling the upcoming songs in the queue">
				So usually, after the random pick algorithm has been thrown away because it sucks so much,
				the developers instead decide to shuffle the upcoming songs that are currently in the queue.

				This is already a huge improvement <thought>(but it obviously has it's flaws, otherwise I wouldn't be talking about it here)</thought>,
				and if your playlist / queue is long enough, then it <em>usually</em> wouldn't cause you any further problems.

				However, one big issue that I commonly see among the music players that do this, is that they don't re-shuffle
				the queue once it has finished, they simply go back to the start.

				Now this is a big problem because a lot of of music players also don't include a 're-shuffle' button, or
				when they do it's usually just a button that cycles between 'song shuffle', 'album shuffle' and 'no shuffle',
				so you end up having to click on it multiple times which is just annoying if you have to do it often.

				Another reason why not re-shuffling the queue is a problem, is that for a lot of people music is something that
				they have on in the background, they don't want to be switching back to the music player to re-shuffle the queue.

				Now you might say that if they only have the music on in the background, then they wouldn't care about re-shuffling,
				and that's fair, they might not, I'd say that it depends on the person, for me, if I have a short playlist on, then I
				will start noticing that it's repeating in the same order.

				Usually having a long playlist / queue avoids these problems. However, not always, because some people don't like
				turning off their computers, and so their music player just stays open, keeping the exact same queue and never resetting.

				Now obviously a person probably wouldn't remember the exact order their songs were played in on the previous day, but when
				you get the same order several days in a row, you will start noticing what song comes on after the current one.
				Try it out yourself by just listening to one playlist for a few days without ever shuffling it.

				This can also be problematic on phones, because sometimes the music playing <abbr title="applications">apps</abbr> will
				keep the queue even after you close them, since they are still running in the background.
			</section>

			<section id="youtube" title="YouTube">
				So you might be thinking: "Why does YouTube get it's own section?" Well... That's
				because it is the worst god damn piece of software that I have ever had the displeasure
				of using to listen to music, it is absolutely dog poop and anyone who is on that developer
				team should be ashamed of their existence for letting a product <em>so bad</em> continue to exist.

				Not only does it use the 'randomly picking the next song' approach, but whatever it uses for the
				<link href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">
					<abbr title="Pseudorandom number generator">PRNG</abbr>
				</link>
				can end up bugging out and getting stuck in an infinite loop of a small number of songs from the
				playlist / queue repeating.

				I have absolutely no idea how they managed to screw that up. I would honestly love to blame it on
				the implementation of
				<link href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/random" title="MDN web documentation about Math.random().">
					<code>Math.random()</code>
				</link>
				just to give YouTube at least a little bit of a chance, but it has happened to several different
				people that I know, even across different browsers.

				But that's not the end of YouTube's bugs, ohhhhh no, obviously they just have to somehow
				keep on screwing things up, in the most ridiculous ways, and going years without bothering
				to fix them.

				So what is the next bug you ask? Well when you have a queue playing, then you also have the
				toggle buttons for "shuffling" <thought>(even though it's just randomly picking the next song)</thought> and
				repeating the entire queue once it ends. However, somehow, sometimes, for unknown reasons, those
				toggle buttons end up resetting and turning off, meaning that occasionally, your songs stop
				"shuffling", and even worse, they stop repeating.

				And because YouTube uses the 'pick the next song randomly' approach, it means that even if you
				have a queue of several hundred or thousand songs, it's possible for it to jump to the last song,
				then bug out and stop the queue from repeating, and once your song ends, so does your music.
				<thought>(Assuming YouTube doesn't just start auto-playing a random video, because it also loves doing that for no reason).</thought>
			</section>

			<section id="solution" title="Solution?">
				So what's the solution to this? Is there a perfect shuffling algorithm
				that creates the best music listening experience? And honestly, that I
				do not know yet.

				I have played around with some possible ideas, however at the present my
				limited maths skills are letting me down. <thought>(I hate learning maths...)</thought>

				However, my general opinion is that shuffling algorithms should properly
				keep track of the queue history, and use that information as heuristics
				in order to eliminate repeating patterns.

				In my opinion, that should at the very least include making sure that
				songs that were near each other are spread out, while making sure to account
				for the end and start of the queue.

				What I mean by this, is that if your current queue looked like <code>A, B, C, D</code>,
				then the next shuffled queue (which will play afterwards) should not be
				<code>C, A, D, B</code> for example. This is because when you combine them,
				and look at what the user will actually be hearing, you'll get
				<code>A, B, C, D, C, A, D, B</code> and from this you can clearly see the
				<code>C, D, C</code> pattern, which can occur if you don't make sure to
				check the end of the current queue, and the start of the new one.
			</section>
	</article>

	<article id="covers" title="Album and song covers">
			<summary>
				<thought>(Early optimisation is the root of all evil).</thought>
			</summary>
			<content>
				Ah covers... My beloved, and my most hated part of local audio. I love them
				because they make your music library much nicer to look at, they make it
				easier to identify your tracks and albums, and over all they're just a
				very nice visual icing on the cake.

				Now what do I hate about them? Surprisingly nothing, at least nothing I hate
				about the audio covers themself. It's more about their implementation in
				the common audio tagging formats, and how the music players treat them.
			</content>
			<section id="cover-tagging" title="Cover tagging">
				So why is tagging audio covers so annoying? Well some tagging formats only
				allow for text data to be stored, meaning that the audio covers will
				typically be stored in <link href="https://en.wikipedia.org/wiki/Base64"
				title="Wikipedia article about base64.">base64</link>.
				This will usually result in around a 35% increase in the amount of bytes required
				to store the image <thought>(this number comes from both the Wikipedia article
				linked earlier, and from a little bit of manual verification)</thought>. And well,
				that is clearly not great. It's not the worst it could be by all means, but it's
				not the best either, especially not when some covers end up being 4k or bigger.

				It is also possible to have several images for an audio track / album, it's not
				just the front covers, there's also back covers, side labels, logos, photos of artists
				/ composers / e.t.c, and so on. Including pictures of brightly colored fish
				<thought>(I dare you to go down that rabbit hole, and if you ever reach the end,
				then please let me know - I'm serious, please do let me know)</thought>.

				So now all of that combined together and now each of your audio tracks is several
				<link href="https://en.wikipedia.org/wiki/Byte#Multiple-byte_units">
					<abbr title="Mebibytes, or 1024 × 1024 bytes, you know, the much saner scale for memory than scales of 1000.">MiBs</abbr>
				</link>
				bigger than it needed to be. Now we do live in an era where a few MiBs of memory
				won't be a big deal, but for some people their music library contains several hundreds,
				and sometimes even several thousands of audio tracks <thought>(if not even more)</thought>.

				So at this point, your music library has jumped up by a <abbr title="Gibibyte, or 1024 × 1024 × 1024 bytes.">GiB</abbr>
				or a few, and you might be thinking "that's not really that much", and you'd be completely
				right, and I'd fully agree, in this era of computing a GiB or a few really means nothing
				when it comes to disk space. But here's the kicker, this section is not for complaining
				about the extra library size, oh no, if it was that simple then I wouldn't even be complaining
				about cover images in the first place. No, this section is merely a prerequisite, some extra
				context for the next section where I complain about how music players deal with them.

				However before that, a little bit of interesting information <thought>(and some extra
				context)</thought>, is that each audio file contains it's own cover images, even if
				every song in the album will have the exact same images. Now this comes in very handy
				when a song does in fact have it's own unique cover, such as when a song is released
				as a single, instead of being a part of an album.
			</section>
	</article>
</project>